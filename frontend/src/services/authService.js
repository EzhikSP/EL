export async function login(username, password) {
  try {
    const response = await fetch("http://localhost:8000/auth/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
    }

    const data = await response.json();
    console.log("üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
    localStorage.setItem("token", data.access_token);
    console.log("üîç –¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ–º:", data.access_token);
    return data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
    throw new Error(error.message || "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ");
  }
}

export async function register({ username, password, email, character_class, race }) {
  try {
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ /register:", {
      username,
      password,
      confirm_password: password,
      email,
      character_class,
      race,
    });
    const response = await fetch("http://localhost:8000/auth/register", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        username,
        password,
        confirm_password: password, // FastAPI —Ç—Ä–µ–±—É–µ—Ç confirm_password
        email,
        character_class, // FastAPI —Ç—Ä–µ–±—É–µ—Ç character_class
        race,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞):", errorData);

      // –ï—Å–ª–∏ errorData.detail ‚Äî –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ —Å—Ç—Ä–æ–∫—É
      let errorMessage = "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
      if (typeof errorData.detail === "string") {
        errorMessage = errorData.detail;
      } else if (Array.isArray(errorData.detail)) {
        errorMessage = errorData.detail.join(", "); // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤, –æ–±—ä–µ–¥–∏–Ω–∏–º –æ—à–∏–±–∫–∏
      } else if (typeof errorData.detail === "object") {
        errorMessage = JSON.stringify(errorData.detail); // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ —Å—Ç—Ä–æ–∫—É
      }
      console.log("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞):", errorData);
      throw new Error(errorMessage);
    }

    return await response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    throw new Error(error.message || "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
  }
}
